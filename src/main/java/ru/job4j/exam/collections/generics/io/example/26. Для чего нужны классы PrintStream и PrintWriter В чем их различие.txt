26. Для чего нужны классы PrintStream и PrintWriter? В чем их различие?
Это два класса вывода.

это классс вывода,  класс для побайтового вывода данных, как в консоль, так и в другие потоки(PrintStream stream = new PrintStream(
                new FileOutputStream("data/print.txt")))
PrintStream(OutputSream out, boolean autoFlach) -OutputSream out - обозначает открытый поток вывода типа Output
Stream, который будет принимать выводимые данные.autoFlach- Параметр autoFlush определяет, будет ли автоматически выполняться очистка (сброс) буфера при вызове методов записи данных. Если autoFlush установлен в true, то при каждой операции записи данные будут сразу же записываться на целевой носитель, даже если буфер еще не полностью заполнен. Если autoFlush установлен в false, данные будут оставаться в буфере, пока он не будет полностью заполнен или пока не будет явно вызван метод flush() для очистки буфера.
Мы используем конструкцию try-with-resources, чтобы поток автоматически закрылся после завершения блока try. При закрытии потока вызывается flush(), поэтому данные из буфера будут записаны на устройство.
 try (PrintStream stream = new PrintStream(new FileOutputStream("data/output.txt"))) {
            stream.println("Hello, world!");

            // Явный вызов flush() не требуется, так как поток будет автоматически закрыт с вызовом flush()
            // перед выходом из блока try
            
            // Допустим, у нас есть долгая операция, и мы хотим увидеть результаты частичной записи
            for (int i = 0; i < 10; i++) {
                stream.println("Partial result: " + i);
                // Здесь данные записываются в буфер, но еще не попадают на устройство
            }

            // При выходе из блока try, поток будет автоматически закрыт,
            // и все данные в буфере будут записаны на устройство
        } catch (IOException e) {
            e.printStackTrace();

PrintWriter -- поток вывода для симмвольных данных,Символьные данные: это данные, которые представлены в виде символов или текста. Каждый символ обычно представлен определенным кодом, таким как кодировка Unicode. Символьные данные обычно используются для представления текстовой информации, которую человек может прочитать или записать. Примеры символьных данных включают буквы, цифры, знаки пунктуации и другие символы, которые мы используем при написании текста.
Для вывода текста в консоль лучше подходит PrintWriter, так как он работает сразу с символами и использует юникод для преобразования символов, тем самым поддерживается платформонезависимость. Класс PrintStream появился в Java 1.0, а класс PrintWriter только в 1.1. Базовый вывод в консоль в Java осуществляется с помощью PrintStream, что, казалось бы, нецелесообразно, когда уже есть более располагающий к работе с выводом символов класс PrintWriter, но так как в Java существует обратная совместимость, то штатный вывод в консоль так и остался через класс PrintStream. Но если вам нужно работать с текстовыми данными, то лучше использовать для этих целей PrintWriter, а если с байтовыми или смешанными данными, то PrintStream.
В остальном эти классы очень схожи. Главное их отличие только в том, что PrintStream читает побайтово, а PrintWriter посимвольно, и выбирать тот или иной класс нужно в зависимости от вида данных, с которым требуется работать.

Некоторые основные преимущества использования PrintWriter включают:

Удобные методы записи: PrintWriter предоставляет методы для записи различных типов данных, включая строки, числа и другие примитивные типы данных. Это позволяет легко форматировать и выводить данные в нужном формате.

PrintWriter writer = new PrintWriter(System.out);
writer.println("Hello, world!"); // Запись строки
writer.printf("Number: %d, Text: %s", 42, "Example"); // Запись отформатированных данных

Поддержка автоматической конвертации: PrintWriter автоматически преобразует различные типы данных в их текстовое представление, что облегчает запись данных в поток вывода без необходимости явного преобразования.
PrintWriter writer = new PrintWriter(System.out);
int number = 42;
double value = 3.14;
writer.println(number); // Автоматическая конвертация в строку
writer.println(value); // Автоматическая конвертация в строку

Управление символьными данными: PrintWriter работает с символьными данными, что удобно для записи текстовых сообщений. Он также обеспечивает возможность указывать кодировку символов при создании экземпляра класса, что полезно при работе с различными языками и наборами символов.
PrintWriter writer = new PrintWriter("data/output.txt", "UTF-8");
writer.println("Привет, мир!"); // Запись строки на русском языке
writer.println("こんにちは、世界！"); // Запись строки на японском языке

Возможность записи в различные целевые носители: PrintWriter может быть настроен для записи данных в различные целевые носители, такие как файлы (FileWriter), символьные массивы (CharArrayWriter), строки (StringWriter) и другие. Это позволяет гибко управлять выводом данных в нужное место.

PrintWriter fileWriter = new PrintWriter(new FileWriter("data/output.txt"));
PrintWriter stringWriter = new PrintWriter(new StringWriter());
PrintWriter byteArrayWriter = new PrintWriter(new ByteArrayOutputStream());

fileWriter.println("Hello, world!"); // Запись в файл
stringWriter.println("Hello, world!"); // Запись в строку
byteArrayWriter.println("Hello, world!"); // Запись в байтовый массив



Также есть еще одно отличие у PrintWriter касаемо опции autoFlush. У данного класса autoFlush будет производиться в случае вызовов методов println(), printf() или format().

у класса PrintWriter есть опция autoFlush, которая определяет, будет ли автоматически выполняться очистка буфера при вызове определенных методов. В случае PrintWriter автоочистка буфера будет происходить при вызовах методов println(), printf() или format().

Когда autoFlush установлен в значение true, это означает, что буфер будет автоматически очищаться и данные будут записываться в целевой носитель (например, файл или консоль) каждый раз, когда вы вызываете один из указанных методов.

import java.io.*;

public class PrintWriterExample {
    public static void main(String[] args) {
        try (PrintWriter writer = new PrintWriter(new FileWriter("output.txt"), true)) {
            writer.println("Hello, world!"); // Автоочистка буфера и запись в файл
            writer.printf("The value of pi is %.2f", Math.PI); // Автоочистка буфера и запись в файл
            writer.format("Today is %tF", new Date()); // Автоочистка буфера и запись в файл
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
у класса PrintStream отличается поведение опции autoFlush по сравнению с классом PrintWriter. У PrintStream автоочистка буфера происходит только при вызове метода flush() или при закрытии потока.











