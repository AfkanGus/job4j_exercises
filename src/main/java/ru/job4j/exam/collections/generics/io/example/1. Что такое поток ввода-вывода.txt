1. Что такое поток ввода-вывода

Это абстракцию для передачи информации между программой и внешними источниками или приемниками данных, такими как файлы, сетевые соединения, консоль .
 Благодаря абстракции потоков ввода-вывода все потоки ведут себя одинаково независимо от физического устройства (клавиатуры, консоли, файлов, сети).
Цель создания IO API - абстрактный доступ к вводу-выводу, чтобы не зависеть от подробностей реализации физических устройств.
Поток ввода - это объект, из которого можно считать данные (input) - чтение.
Поток вывода - это объект, в который можно записать данные (output) - запись.
Ниже представлена визуализация чтения и записи данных:
Приложение считывает данные из ресурса, обрабатывает их и сохраняет в хранилище данных.

Потоки ввода-вывода бывают байтовые и символьные. 

Байтовые потоки ввода-вывода.

Байтовые потоки предоставляют средства ввода-вывода отдельных байтов, например, чтения и записи двоичных данных. 
В основе байтовых потоков лежат абстрактные классы InputStream и OutputStream 
Основные классы-реализации InputStream (потоки ввода):

    - ByteArrayInputStream - читает байты из массива

    - FileInputStream - читает данные из файла

    - ObjectInputStream - поток ввода объектов

    - PipedInputStream - канал ввода

    - FilterInputStream - реализует класс InputStream. От него реализуются следующие 3 класса:

            - BufferedInputStream - буферизированный поток ввода

            - DataInputStream - читает данные примитивных типов

            - PushbackInputStream - поток ввода, поддерживающий возврат одного байта обратно в поток ввода.


Основные классы-реализации OutputStream (потоки вывода):

    - ByteArrayOutputStream - записывает байты в массив

    - FileOutputStream - записывает данные в файл

    - ObjectOutputStream - поток вывода объектов

    - PipedOutputStream - канал вывода

    - PrintStream - поток вывода, содержащий методы print() и println()

    - FilterOutputStream - реализует класс OutputStream. От него реализуются следующие 2 класса:

            - BufferedOutputStream - буферизированный поток вывода

            - DataOutputStream - записывает данные примитивных типов

Важно! Все классы, имеющие в названии InputStream/OutputStream читают/пишут данные побайтово.
Символьные потоки ввода-вывода.
Символьные потоки предоставляют средства ввода-вывода отдельных символов. В них применяется кодировка Юникод. Читать данные по байтам в большинстве случаев неудобно, поэтому были введены символьные потоки, которые во многих случаях более эффективны, чем байтовые, так как считывают целиком символы, а не байты. Но на низком уровне весь ввод-вывод в java все равно имеет байтовую организацию.
В основе символьных потоков лежат абстрактные классы Reader и Writer

Основные классы-реализации Reader (потоки ввода символов):

    - BufferedReader - буферизированный поток ввода символов

    - CharArrayReader - читает символы из массива

    - PipedReader - канал ввода

    - StringReader - читает символы из строки

    - FilterReader - фильтрованный поток чтения. От этого класса наследуется класс PushbackReader:

            - PushbackReader - поток ввода, позволяющий вернуть считанные символы обратно в поток ввода

    - InputStreamReader - преобразует байты в символы. От этого класса наследуется класс FileReader:

            - FileReader - читает символы из файла

Основные классы-реализации Writer (потоки вывода символов):

    - BufferedWriter - буферизированный поток вывода символов

    - CharArrayWriter - записывает символы в массив

    - PipedWriter - канал вывода

    - StringWriter - записывает символы в строку

    - FilterWriter - фильтрованный поток записи. 

    - PrintWriter - поток вывода, содержащий методы print() и println()

    - OutputStreamWriter - преобразует символы в байты. От этого класса наследуется класс FileWriter:

            - FileWriter - записывает символы 






Важно! Способ чтения/записи с помощью классов, имеющих в названии Reader/Writer зависит от конкретной реализации. (текст и символы).
Ключевыми методами абстрактных классов InputStream, OutputStream, Reader и Writer являются методы read() - считать данные, и write() - записать данные. В данных классах эти методы абстрактные, они переопределяются во всех их классах-реализациях.
Таким образом, с помощью классов пакета java.io мы можем читать и записывать текст, примитивные данные, объекты, получать доступ к файлам, сетевому соединению и т.д.
Теперь, зная об устройстве системы ввода-вывода Java, можно визуализировать процесс считывания и записи таким образом:
Приложение считывает данные из ресурса с помощью подходящей реализации потока ввода, а потом записывает эти данные в хранилище с помощью подходящего потока вывода.
Предопределенные потоки ввода-вывода.
Все приложения Java автоматически импортируют пакет java.lang. Класс System этого пакета содержит свойства исполняющей среды Java. В том числе он содержит три предопределенных потока ввода-вывода: in, out и err. Эти переменные можно использовать в любой части программы.
System.out - ссылается на стандартный поток вывода (консоль). 

System.in - ссылается на стандартный поток ввода (клавиатура). 

System.err - ссылается на стандартный поток вывода ошибок (консоль). 

Переменные out и err содержат внутри объект типа PrintStream, а переменная in содержит внутри объект типа InputStream. 

 Основные слова названий: Input - ввод, Output - вывод, Stream - побайтовый (поток), Reader - посимвольное чтение, Writer - посимвольная запись. В остальном у этих классов отличаются только приставки в начале, которые говорят об особенности конкретной реализации. Например, Buffered - буферизированный. Название любого класса-реализации потока ввода-вывода можно разобрать подобным образом и получить общее представление о классе. Например, BufferedOutputStream - буферизированная побайтовая запись. Или FileInputStream - это побайтовое чтение из файла. 

Потоки ввода-вывода (I/O streams) в Java представляют собой механизм для обработки потоков данных ввода и вывода. Они предоставляют абстракцию для передачи информации между программой и внешними источниками или приемниками данных, такими как файлы, сетевые соединения, консоль и т.д.
Потоки ввода-вывода имеют два основных типа: потоки ввода (input streams) и потоки вывода (output streams).
Потоки ввода (Input Streams): Эти потоки позволяют программе читать данные из источников, таких как файлы, сетевые соединения, клавиатура и т.д. Классы, представляющие потоки ввода, находятся в пакете java.io. Примеры таких классов включают FileInputStream, BufferedReader и ObjectInputStream.
Потоки вывода (Output Streams): Эти потоки позволяют программе записывать данные в приемники, такие как файлы, сетевые соединения, консоль и т.д. Классы, представляющие потоки вывода, также находятся в пакете java.io. Примеры классов включают FileOutputStream, BufferedWriter и ObjectOutputStream.
Основные преимущества работы с потоками ввода-вывода в Java:
Абстракция данных: Потоки ввода-вывода позволяют абстрагироваться от конкретного источника или приемника данных, что облегчает создание переносимого кода.
Эффективность: Потоки ввода-вывода предоставляют механизмы буферизации, что может повысить эффективность операций чтения и записи данных.
Поддержка различных типов данных: С помощью потоков ввода-вывода вы можете работать с различными типами данных, включая текстовые, бинарные данные и объекты.
Примеры использования потоков ввода-вывода включают чтение и запись файлов, работу с сокетами для сетевого взаимодействия, обработку пользовательского ввода из консоли и другие сценарии обработки данных в Java.


















