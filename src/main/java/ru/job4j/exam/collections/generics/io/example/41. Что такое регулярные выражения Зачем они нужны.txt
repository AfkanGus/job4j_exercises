Регулярные выражения (Regular Expressions или RegEx) - это шаблоны, с помощью которых производится поиск по совпадению в тексте. То есть это строка, описывающая последовательность символов, которую желаем найти. С помощью определенного синтаксиса искать можно не только символы напрямую, но и целые диапазоны или комбинации символов. Тем самым можно создавать самые разнообразные шаблоны для поиска с помощью последовательности обычных символов, метасимволов и квантификаторов (о метасимволах и квантификаторах будет рассказано в следующем уроке). В Java работа с регулярными выражениями производится с помощью классов Pattern и Matcher из пакета java.util.regex. Эти классы работают в паре. В классе Pattern определяется регулярное выражение (создается шаблон и сопоставитель), а с помощью класса Matcher производится сопоставление шаблона с текстом. 

регулярные выражения – это, по сути, шаблоны из символов, которые задают определённое правило поиска. И, среди прочего, с их помощью возможно осуществить проверку определённой строки или строк на соответствие некоему заранее заданному паттерну или стандарту.


Метод compile() класса Pattern создает неизменяемый шаблон из переданной последовательности символов, который мы можем использовать для проверки его на наличие присутствия в тексте. При создании шаблона производится проверка на соответствие синтаксису. Если шаблон успешно создан, то в IDEA он будет подсвечиваться зеленым цветом, иначе будет выброшено исключение PatternSyntaxException.
PatternSyntaxException

Неконтролируемое (unchecked) исключение, возникает при синтаксической ошибке в регулярном выражении. В таблице ниже приведены все методы и их описание.
getDescription()	Возвращает описание ошибки.
getIndex()	Возвращает индекс строки, где была найдена ошибка в РВ
getPattern()	Возвращает ошибочное РВ.
getMessage()	getDescription() + getIndex() + getPattern()

Метод matcher() класса Pattern создает сопоставитель нашего шаблона с заданным текстом. 
 * Регулярные выражения (Regular Expressions или RegEx) - это шаблоны,
 * с помощью которых производится поиск по совпадению в тексте
 * Метод compile() класса Pattern создает неизменяемый шаблон
 * из переданной последовательности символов,
 * Метод matcher() класса Pattern создает
 * сопоставитель нашего шаблона с заданным текстом.
 * Регулярные выражения регистрозависимые.
 * Pattern.CASE_INSENSITIVE - при поиске совпадений
 * регистр букв учитываться не будет:
 *
 * <p>
 * Метод find() ищет ближайшее совпадение
 * Его можно применять многократно. Каждый вызов метода find()
 * начинается с места, где закончился его предыдущий вызов.
 * Чтобы найти многократные вхождения шаблона в коде,
 * нужно использовать find() в цикле:
 * Также можно проверить шаблон на его присутствие в тексте.
 * group() - Получить найденное совпадение в виде строки.
 * Этот метод выводит ту часть текста, которая совпадает
 * с шаблоном регулярного выражения.
 * </p>
 * Метод start() - получает индекс, в котором находится первый символ
 * искомой
 * последовательности символов.
 * <p>
 * Метод end() - получает индекс, следующий за последним символом искомой
 * последовательности символов.
 * <p>
 * replaceAll() - найденные совпадения можно заменить другой строкой.
 * String rsl = matcher.replaceAll("Job4j");
 * </p>
Недетерминированный конечный автомат (НКА) — «механизм, управляемый регулярным выражением»
Детерминированный конечный автомат (ДКА) — «механизм, управляемый текстом»
Регулярные выражения в Java используют механизм НКА.
НКА — механизм, в котором управление внутри РВ передается от компонента к компоненту. НКА просматривает РВ по одному компоненту и проверяет, совпадает ли компонент с текстом. Если совпадает — проверятся следующий компонент. Процедура повторяется до тех пор, пока не будет найдено совпадение для всех компонентов РВ (пока не получим общее совпадение).

