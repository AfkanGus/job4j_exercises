39. Как преобразовать POJO в/из xml?
 Для начала нам нужно добавить зависимости на библиотеку JAXB с помощью которой мы будет делать преобразования
<dependency>
    <groupId>javax.xml.bind</groupId>
    <artifactId>jaxb-api</artifactId>
    <version>2.3.1</version>
</dependency>
<dependency>
    <groupId>javax.activation</groupId>
    <artifactId>activation</artifactId>
    <version>1.1.1</version>
</dependency>
<dependency>
    <groupId>org.glassfish.jaxb</groupId>
    <artifactId>jaxb-runtime</artifactId>
    <version>2.3.1</version>
</dependency>
POJO - это аббревиатура, которая расшифровывается как "Plain Old Java Object" (Простой Старый Объект на Java). Этот термин используется в контексте программирования на Java для обозначения обычных, стандартных классов, которые не зависят от какой-либо специфической фреймворковой или технологической платформы.
Для преобразования Java объектов (POJO - Plain Old Java Object) в XML и обратно в Java объекты существует несколько подходов и библиотек. Одним из распространенных способов является использование библиотеки JAXB (Java Architecture for XML Binding).

Пример преобразования POJO в XML с использованием JAXB:

Создайте класс POJO: Создайте Java класс, который представляет ваш объект и аннотируйте его аннотациями JAXB, чтобы указать, как элементы и атрибуты объекта должны быть преобразованы в XML.
Добавим аннотации JAXB, которая даст библиотеке информацию о том как парсить объект.
 *
 * @XmlRootElement(name = "boeing") - эта аннотация указывает, что класс Boeing
 * является корневым элементом XML, и имя корневого элемента будет "boeing".
 * @XmlAttribute - эти аннотации указывают, что поля
 * будут представлены в XML, по умолчанию поле парсится как тег.
 * @XmlAccessorType -  JAXB (Java Architecture for XML Binding) будет работать
 * непосредственно с полями класса, а не с его методами (геттерами и сеттерами)
 * при выполнении процессов маршалинга (сериализации) и анмаршалинга (десериализации).
 */

}
Процесс сериализации и десериализации в данном коде осуществляется с использованием Java Architecture for XML Binding (JAXB), который позволяет преобразовывать Java объекты в XML-представление и обратно. Давайте подробно рассмотрим каждый этап:

3. Для того чтобы сериализовать и десериализовать нам нужно добавить аннотации JAXB, которая даст библиотеке информацию о том как парсить объект.

1) Как вы уже знаете xml обязательно должен иметь корневой тег, в котором все и будет располагаться. Для его обозначения служит

@XmlRootElement. Эту аннотацию нужно ставить над сущностью, которая будет корневой в нашем случае это Person

2) Над вложенными сущностями нам нужно поставить просто @XmlElement

3) Для того чтобы поле считалось атрибутом нужно поставить  @XmlAttribute, по умолчанию поле парсится как тег

4) Мы можем указать также как мы хотим читать/писать объект. По геттерам/сеттерам или напрямую по полям (используется рефлексия). Мы будем использовать доступ по полям. Для этих целей служит аннотация @XmlAccessorType
package ru.job4j.io.serialization.xml;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.annotation.*;
import java.io.StringWriter;
import java.util.Arrays;

@XmlRootElement(name = "person")
@XmlAccessorType(XmlAccessType.FIELD)
public class Person {

    @XmlAttribute
    private boolean sex;
    @XmlAttribute
    private int age;
    private Contact contact;
    private String[] statuses;
    public Person() { }
    public Person(boolean sex, int age, Contact contact, String... statuses) {
        this.sex = sex;
        this.age = age;
        this.contact = contact;
        this.statuses = statuses;
    }

    @Override
    public String toString() {
        return "Person{"
                + "sex=" + sex
                + ", age=" + age
                + ", contact=" + contact
                + ", statuses=" + Arrays.toString(statuses)
                + '}';
    }
    public static void main(String[] args) throws JAXBException {
         Person person = new Person(false, 30, new Contact("11-111"), "Worker", "Married");
               /* Получаем контекст для доступа к АПИ */
               JAXBContext context = JAXBContext.newInstance(Person.class);
               /* Создаем сериализатор */
               Marshaller marshaller = context.createMarshaller();
               /* Указываем, что нам нужно форматирование */
               marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
               String xml = "";
               try (StringWriter writer = new StringWriter()) {
                   /* Сериализуем */
                   marshaller.marshal(person, writer);
                   xml = writer.getBuffer().toString();
                   System.out.println(xml);
               }
               /* Для десериализации нам нужно создать десериализатор */
               Unmarshaller unmarshaller = context.createUnmarshaller();
               try (StringReader reader = new StringReader(xml)) {
                   /* десериализуем */
                   Person result = (Person) unmarshaller.unmarshal(reader);
                   System.out.println(result);
               }
5. Обратите внимание, что статусы выводятся в таком формате
<statuses>Worker</statuses>
<statuses>Married</statuses>
Чтобы выводилось так как мы хотим мы можем переименовать элемент statuses в status и использовать тег @XmlElementWrapper
@XmlElementWrapper(name = "statuses")
@XmlElement(name = "status")
private String[] statuses;