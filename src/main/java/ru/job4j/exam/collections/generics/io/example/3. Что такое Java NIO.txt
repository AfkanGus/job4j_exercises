3. Что такое Java NIO

В версии Java 1.4 была введена новая система ввода-вывода - NIO (New IO). Она представлена в пакете java.nio. В данном уроке мы коротко рассмотрим ее основные отличия от ранее рассмотренной системы ввода-вывода Java IO (пакет java.io). 
NIO.
В системе ввода-вывода IO API, с которой мы познакомились в предыдущем уроке, используется потокоориентированный подход. Данный подход организует чтение из потока или запись в поток последовательно по несколько байт в один момент времени. Принцип работы как у  обычного потока (Stream). Данные просто передаются из одного места в другое без какого-либо кэширования (кэширование - это временное хранение данных в памяти. Мы будем изучать его на уровне Мидл), то есть данные читаются/записываются без промежуточного сохранения в какую-либо область памяти. Такой подход имеет недостаток: нет возможности перемещаться по содержимому потока ни вперед, ни назад. 
Новая система Java NIO API использует буферориентированный подход. Данный подход организует чтение и запись данных с помощью их загрузки в специальные буферы, внутри которых можно перемещаться по данным вперед и назад, тем самым обеспечивается гибкость обработки данных. 
Есть еще одно отличие между IO и NIO:
-в IO при чтении из потока или записи в поток (методы read или write) работа программы блокируется, пока не закончится чтение/запись. Данные читаются побайтово или посимвольно.
- NIO читает данные в буфер. Обработать можно только те данные, которые уже считались в буфер. При этом блокировка программы не производится. Данное отличие касается тем многопоточность и блокировка работы программы. Их мы будем проходить на уровне Мидл. Также уроки, более широко раскрывающие особенности работы NIO, также будут в разделе Мидл.

В основе системы ввода-вывода NIO лежат буферы и каналы. Буфер хранит данные, а канал - это шлюз, который предоставляет соединение с устройством ввода-вывода (Например, файл). Система работы NIO: получаем буфер для хранения данных, получаем канал для устройства ввода-вывода. По мере необходимости загружаем данные в буфер и передаем по каналу. Подробно буферы, каналы и работа NIO будет рассматриваться на уровне Мидл. Этот блок дан для ознакомления, в его подробности вдаваться сейчас не нужно.

Java NIO позволяет управлять несколькими каналами (сетевыми соединениями или файлами) используя минимальное число потоков выполнения. Однако ценой такого подхода является более сложный, чем при использовании блокирующих потоков, парсинг данных.

Если вам необходимо управлять тысячами открытых соединений одновременно, причем каждое из них передает лишь незначительный объем данных, выбор Java NIO для вашего приложения может дать преимущество



Потокоориентированный и буфер-ориентированный ввод/вывод

Основное отличие между двумя подходами к организации ввода/вывода в том, что Java IO является потокоориентированным, а Java NIO – буфер-ориентированным. Разберем подробней.

Потокоориентированный ввод/вывод подразумевает чтение/запись из потока/в поток одного или нескольких байт в единицу времени поочередно. Данная информация нигде не кэшируются. Таким образом, невозможно произвольно двигаться по потоку данных вперед или назад. Если вы хотите произвести подобные манипуляции, вам придется сначала кэшировать данные в буфере.

Подход, на котором основан Java NIO немного отличается. Данные считываются в буфер для последующей обработки. Вы можете двигаться по буферу вперед и назад. Это дает немного больше гибкости при обработке данных. В то же время, вам необходимо проверять содержит ли буфер необходимый для корректной обработки объем данных. Также необходимо следить, чтобы при чтении данных в буфер вы не уничтожили ещё не обработанные данные, находящиеся в буфере.

Блокирующий и неблокирующий ввод/вывод
Потоки ввода/вывода (streams) в Java IO являются блокирующими. Это значит, что когда в потоке выполнения (tread) вызывается read() или write() метод любого класса из пакета java.io.*, происходит блокировка до тех пор, пока данные не будут считаны или записаны. Поток выполнения в данный момент не может делать ничего другого.

Неблокирующий режим Java NIO позволяет запрашивать считанные данные из канала (channel) и получать только то, что доступно на данный момент, или вообще ничего, если доступных данных пока нет. Вместо того, чтобы оставаться заблокированным пока данные не станут доступными для считывания, поток выполнения может заняться чем-то другим.

Каналы – это логические (не физические) порталы, через которые осуществляется ввод/вывод данных, а буферы являются источниками или приёмниками этих переданных данных. При организации вывода, данные, которые вы хотите отправить, помещаются в буфер, а он передается в канал. При вводе, данные из канала помещаются в предоставленный вами буфер.

Каналы напоминают трубопроводы, по которым эффективно транспортируются данные между буферами байтов и сущностями по ту сторону каналов. Каналы – это шлюзы, которые позволяют получить доступ к сервисам ввода/вывода операционной системы с минимальными накладными расходами, а буферы – внутренние конечные точки этих шлюзов, используемые для передачи и приема данных.

Тоже самое справедливо и для неблокирующего вывода. Поток выполнения может запросить запись в канал некоторых данных, но не дожидаться при этом пока они не будут полностью записаны.

Таким образом неблокирующий режим Java NIO позволяет использовать один поток выполнения для решения нескольких задач вместо пустого прожигания времени на ожидание в заблокированном состояний. Наиболее частой практикой является использование сэкономленного времени работы потока выполнения на обслуживание операций ввода/вывода в другом или других каналах.







