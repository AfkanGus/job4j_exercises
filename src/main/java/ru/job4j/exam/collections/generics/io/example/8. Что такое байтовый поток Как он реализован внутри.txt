8. Что такое байтовый поток? Как он реализован внутри?
Байтовый поток (Byte Stream) в Java представляет собой последовательность байтов, которую можно использовать для чтения или записи данных. Он предназначен для работы с бинарными данных, такими как изображения, аудио, видео, архивы и другие не-текстовые файлы. В Java байтовые потоки реализованы через классы из пакета java.io.

Базовыми классами для чтения и записи байтовых потоков являются InputStream (для чтения) и OutputStream (для записи). Далее рассмотрим, как байтовый поток обычно реализован внутри.

Байтовый ввод (InputStream):
InputStream (абстрактный класс): Он служит базовым классом для всех классов байтового ввода. У него есть методы, такие как read(), read(byte[] buffer), close(), и другие.

FileInputStream: Этот класс предназначен для чтения данных из файла. Он открывает байтовый поток для чтения из файла.

ByteArrayInputStream: Этот класс позволяет создать байтовый поток для чтения из массива байтов.

BufferedInputStream: Этот класс предоставляет буферизованную обертку над другим входным потоком. Он повышает эффективность операций чтения за счет буферизации.

Байтовый вывод (OutputStream):
OutputStream (абстрактный класс): Он является базовым классом для всех классов байтового вывода. Он содержит методы, такие как write(int b), write(byte[] buffer), flush(), close(), и другие.

FileOutputStream: Этот класс предназначен для записи данных в файл. Он открывает байтовый поток для записи в файл.

ByteArrayOutputStream: Этот класс позволяет создать байтовый поток для записи в массив байтов.

BufferedOutputStream: Этот класс предоставляет буферизованную обертку над другим выходным потоком. Он повышает эффективность операций записи за счет буферизации.

При работе с байтовыми потоками, данные обрабатываются как простая последовательность байтов без какой-либо интерпретации. Это может быть полезно для бинарных файлов, где каждый байт имеет особое значение и порядок. Внутренне классы байтовых потоков обычно используют низкоуровневые операции с файлами и буферами для обеспечения эффективной передачи данных.