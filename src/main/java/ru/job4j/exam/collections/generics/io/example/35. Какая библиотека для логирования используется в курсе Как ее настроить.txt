35. Какая библиотека для логирования используется в курсе Как ее настроить

В Java есть несколько библиотек для логгирования: Logback, log4j, System.out.println.
Библиотека slf4j позволяет абстрагироваться от конкретных библиотек. Это позволяет придерживаться единого стиля логгирования для проектов.
SLF использует шаблон проектирования - фасад. Шаблон фасад упрощает АПИ логгеров. Делает их понятными.

Опишем проблему. Команда А разрабатывала библиотеки для работы с изображениями. Команда А использует для логгирования LogBack.

Команда B используют библиотеку разработанную командой А, но в своем проекте команда В используют Log4j. 

Теперь, чтобы логгирование работало во всей системе команде В нужно настроить и Log4j и LogBack. Это неудобно.
Если команды будут использовать прослойку slf4j перед своими системами логгирования, то такой проблемы не возникнет.
Команда А продолжает использовать LogBack. Команда B используют библиотеки команды А, но внутри уже работает с log4j через слой slf4j.
Подключим к нашему проекту slf4j.

Откройте файл c:\projects\job4j_design\pom.xml

Добавьте в него зависимость.

java
<dependency>
    <groupId>org.slf4j</groupId>
    <artifactId>slf4j-log4j12</artifactId>
    <version>1.7.30</version>
</dependency>

В данном классе используется библиотека SLF4J (Simple Logging Facade for Java) для настройки и управления логированием. Давайте рассмотрим каждую из этих библиотек:

org.slf4j.Logger: Logger - это интерфейс из SLF4J, предоставляющий методы для записи логов. Логирование представляет собой процесс записи информации о работе программы, которая может быть полезна для отладки или мониторинга приложения.

org.slf4j.LoggerFactory: LoggerFactory - это утилитный класс из SLF4J, который предоставляет методы для получения экземпляров Logger. Это фабрика логгеров, которая помогает создавать логгеры для различных классов в приложении.

Когда вы создаете статическое поле LOG с помощью LoggerFactory.getLogger(UsageLog4j.class.getName()), вы получаете экземпляр логгера для класса UsageLog4j. Все логи, которые будут выполняться через этот логгер, будут ассоциированы с классом UsageLog4j, что упрощает отслеживание и фильтрацию логов для конкретных классов.

Настройки логирования (например, куда записывать логи, уровни логирования и формат вывода) обычно определяются в файле конфигурации, например, logback.xml или log4j.properties, которые должны присутствовать в вашем проекте для правильного функционирования логирования через SLF4J.
/**
 * Класс деманстрирует записи логов в соответствующий лог-файл или
 * другой назначенный источник логирования, в зависимости от настроек Log4j
 * <p>
 * Библиотека SLF4J (Simple Logging Facade for Java) для настройки и управления логированием.
 * LoggerFactory -  это утилитный класс из SLF4J, который предоставляет методы для получения экземпляров Logger.
 * Это фабрика логгеров, которая помогает создавать логгеры для различных классов в приложении.
 * LogManager отвечает за создание и настройку логгеров.
 * Logger предоставляет методы для записи логов разного уровня.
 * LOG - статическая константа LOG, которая будет использоваться для записи логов.
 * LogManager.getLogger() создает новый логгер, связанный с классом UsageLog4j,для записи логов.
 * <p>
 * Уровень TRACE используется для отладочных сообщений, которые обычно не нужны в продакшене.
 * Уровень DEBUG используется для отладочных сообщений, которые могут быть полезны при разработке и отладке.
 * Уровень INFO используется для информационных сообщений о ходе выполнения программы.
 * Уровень WARN используется для сообщений о предупреждениях или потенциальных проблемах.
 * Уровень ERROR используется для сообщений об ошибках или исключительных ситуациях.
 */
public class UsageLog4j {
    private static final Logger LOG = LoggerFactory.getLogger(UsageLog4j.class.getName());

    public static void main(String[] args) {
        /* Эта строка записывает лог сообщения с разными уровнями*/
        LOG.trace("trace message");
        LOG.debug("debug message");
        LOG.info("info message");
        LOG.warn("warn message");
        LOG.error("error message");
    }
}
