2. Что такое Java IO
 За работу с потоками данных в Java отвечает IO API (Input & Output - ввод-вывод). Это API содержит классы для облегчения работы с потоками ввода-вывода, они располагаются в пакете java.io, в котором поддерживается базовая система ввода-вывода Java, в том числе и файловый ввод-вывод.
Как давно уже известно всем программистам, большинство программ не могут
выполнять свои функции, не имея доступа к внешним данным. Данные извлекают­
ся из источника вrюда. А результат выполнения программы направляется адресату
вывода. В языке Java эти понятия определяются очень широко. Например, источ­
ником ввода или адресатом вывода может служить сетевое соединение, буфер па­
мяти или дисковый файл, и всеми ими можно манипулировать с помощью классов
ввода-вывода в Java. И хотя все устройства ввода-вывода отличаются физически,
все они описываются единой абстракцией -
потоком ввода-вывода. Как поясня­
лось главе 13, поток ввода-вывода -
это логический объект, который поставляет
или потребляет информацию. Поток ввода-вывода присоединяется к физическо­
му устройству системой ввода-вывода в Java. Все потоки ввода-вывода ведут себя
сходным образом, несмотря на то, что физические устройства, к которым они при­
соединены, радикально отличаются.
На заметку! Потоковая система ввода-вывода, входящая в пакет j ava. io и рассматриваемая в этой
главе, была составной частью Java, начиная с первого выпуска и широко применяется до сих
пор. Но в версии 1.4 в Java была внедрена вторая система ввода-вывода. Она называется NIO
(что первоначально означало New 1/0, т.е. новый ввод-вывод). Система NIO входит в пакет
j ava. nio и его подпакеты и подробно рассматривается в главе 22.
На заметку! Не следует путать потоки ввода-вывода из рассматриваемой здесь системы ввода-вы­
вода с потоками данных из нового прикладного интерфейса API, внедренного в версии JDK 8.
Несмотря на концептуальную связь между ними, это все-таки разные средства ввода-вывода.
Следовательно, под термином поток ввода-вывода здесь подразумевается поток из системы
ввода-вывода.

краткое описание каждого класса и интерфейса из пакета java.io.

Классы:

BufferedReader: Буферизует символьный ввод, обеспечивая более эффективное чтение из потока.

BufferedWriter: Буферизует символьный вывод, обеспечивая более эффективную запись в поток.

CharArrayReader: Использует массив символов как источник для символьного ввода.

CharArrayWriter: Использует массив символов для буферизованной записи символов.

Console: Предоставляет доступ к системной консоли для чтения ввода пользователя и вывода.

DataInputStream: Позволяет чтение примитивных типов данных из байтового потока.

DataOutputStream: Позволяет запись примитивных типов данных в байтовый поток.

File: Предоставляет абстракцию для работы с файловыми и папочными объектами.

FileDescriptor: Представляет файловый дескриптор, который можно использовать для создания входных и выходных потоков.

FileInputStream: Позволяет чтение байтовых данных из файла.

FileOutputStream: Позволяет запись байтовых данных в файл.

FileReader: Позволяет чтение символьных данных из файла.

FileWriter: Позволяет запись символьных данных в файл.

FilterInputStream: Обеспечивает базовую функциональность для фильтров ввода.

FilterOutputStream: Обеспечивает базовую функциональность для фильтров вывода.

FilterReader: Обеспечивает базовую функциональность для фильтров символьного ввода.

FilterWriter: Обеспечивает базовую функциональность для фильтров символьного вывода.

InputStream: Абстрактный базовый класс для потоков байтового ввода.

InputStreamReader: Позволяет переходить от потоков байтов к потокам символов.

LineNumberInputStream: Подсчитывает количество считанных байтов.

LineNumberReader: Подсчитывает количество считанных строк.

ObjectInputStream: Позволяет десериализовать объекты из потока.

ObjectOutputStream: Позволяет сериализовать объекты в поток.

ObjectStreamClass: Предоставляет информацию о классе в потоке.

ObjectStreamField: Представляет поле объекта в потоке.

OutputStream: Абстрактный базовый класс для потоков байтового вывода.

OutputStreamWriter: Позволяет переходить от потоков байтов к потокам символов.

PipedInputStream: Предоставляет поток для чтения данных из связанного потока.

PipedOutputStream: Предоставляет поток для записи данных в связанный поток.

PipedReader: Предоставляет символьный поток для чтения данных из связанного символьного потока.

PipedWriter: Предоставляет символьный поток для записи данных в связанный символьный поток.

PrintStream: Позволяет форматированно выводить данные в поток.

PrintWriter: Позволяет форматированно выводить символьные данные в поток.

PushbackInputStream: Позволяет вернуть считанный байт обратно в поток.

PushbackReader: Позволяет вернуть считанный символ обратно в поток.

RandomAccessFile: Позволяет произвольно перемещаться по файлу и выполнять чтение и запись.

Reader: Абстрактный базовый класс для потоков символьного ввода.

SequenceInputStream: Объединяет несколько потоков ввода в один последовательный поток.

SerializablePermission: Используется для проверки разрешений, связанных с сериализацией.

StreamTokenizer: Разбивает поток на токены для обработки.

StringBufferInputStream: Использует строку как источник для байтового ввода (устаревший класс).

StringReader: Использует строку как источник символьного ввода.

StringWriter: Использует строку для буферизованной записи символов.

Writer: Абстрактный базовый класс для потоков символьного вывода.

Интерфейсы:

Closeable: Интерфейс, который обозначает, что объект может быть закрыт для освобождения ресурсов.

DataInput: Интерфейс для чтения примитивных типов данных из байтового потока.

DataOutput: Интерфейс для записи примитивных типов данных в байтовый поток.

Externalizable: Интерфейс для управления своей сериализацией и десериализацией.


FileFilter: Интерфейс для фильтрации файлов и папок на основе заданных критериев.

FilenameFilter: Интерфейс для фильтрации файлов в каталоге по имени файла.

Flushable: Интерфейс, который обозначает, что объект можно принудительно "сбросить" для записи буферизованных данных.

ObjectInput: Интерфейс для чтения объектов из потока.

ObjectInputValidation: Интерфейс, который позволяет объекту выполнять проверку после чтения из потока.

ObjectOutput: Интерфейс для записи объектов в поток.

Serializable: Маркерный интерфейс, который обозначает, что объект может быть сериализован и десериализован.