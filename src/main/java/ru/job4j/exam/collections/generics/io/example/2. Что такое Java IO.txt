2. Что такое Java IO

Java IO (Input/Output) — это пакет в языке программирования Java, предоставляющий средства для ввода
и вывода данных. Он включает в себя классы и интерфейсы, которые обеспечивают различные способы работы с

 потоками данных, файлами, сетевыми ресурсами и другими источниками/приемниками информации.

Основные элементы пакета java.io включают в себя:

Потоки (Streams): Потоки представляют собой абстракции, которые позволяют программам считывать или
записывать данные. Они делятся на байтовые и символьные потоки. Примеры классов потоков: InputStream,
OutputStream, Reader, Writer.

Работа с файлами: Классы, такие как File, FileInputStream, FileOutputStream, предоставляют функциональность
 для работы с файловой системой, чтения и записи файлов.

Буферизация: Классы BufferedReader и BufferedWriter предоставляют буферизированный ввод и вывод данных,
что может увеличить производительность операций ввода-вывода.

Сериализация: Java IO включает механизм сериализации, который позволяет объектам быть записанными в поток
и восстановленными из потока. Это часто используется для сохранения объектов в файлы или для передачи объектов по сети.

Работа с сетью: Java IO предоставляет классы, такие как Socket и ServerSocket, для реализации сетевого ввода-вывода.

Работа с ZIP-архивами: Классы ZipInputStream и ZipOutputStream предоставляют возможность работать с ZIP-архивами.

Java IO является частью "старого" ввода-вывода в Java. В более новых версиях Java (после Java 7),
 введен новый пакет NIO (New I/O), предоставляющий более современный и гибкий API для работы с вводом-выводом.

краткое описание каждого класса и интерфейса из пакета java.io.

Классы:

BufferedReader: Буферизует символьный ввод, обеспечивая более эффективное чтение из потока.

BufferedWriter: Буферизует символьный вывод, обеспечивая более эффективную запись в поток.

CharArrayReader: Использует массив символов как источник для символьного ввода.

CharArrayWriter: Использует массив символов для буферизованной записи символов.

Console: Предоставляет доступ к системной консоли для чтения ввода пользователя и вывода.

DataInputStream: Позволяет чтение примитивных типов данных из байтового потока.

DataOutputStream: Позволяет запись примитивных типов данных в байтовый поток.

File: Предоставляет абстракцию для работы с файловыми и папочными объектами.

FileDescriptor: Представляет файловый дескриптор, который можно использовать для создания входных и выходных потоков.

FileInputStream: Позволяет чтение байтовых данных из файла.

FileOutputStream: Позволяет запись байтовых данных в файл.

FileReader: Позволяет чтение символьных данных из файла.

FileWriter: Позволяет запись символьных данных в файл.

FilterInputStream: Обеспечивает базовую функциональность для фильтров ввода.

FilterOutputStream: Обеспечивает базовую функциональность для фильтров вывода.

FilterReader: Обеспечивает базовую функциональность для фильтров символьного ввода.

FilterWriter: Обеспечивает базовую функциональность для фильтров символьного вывода.

InputStream: Абстрактный базовый класс для потоков байтового ввода.

InputStreamReader: Позволяет переходить от потоков байтов к потокам символов.

LineNumberInputStream: Подсчитывает количество считанных байтов.

LineNumberReader: Подсчитывает количество считанных строк.

ObjectInputStream: Позволяет десериализовать объекты из потока.

ObjectOutputStream: Позволяет сериализовать объекты в поток.

ObjectStreamClass: Предоставляет информацию о классе в потоке.

ObjectStreamField: Представляет поле объекта в потоке.

OutputStream: Абстрактный базовый класс для потоков байтового вывода.

OutputStreamWriter: Позволяет переходить от потоков байтов к потокам символов.

PipedInputStream: Предоставляет поток для чтения данных из связанного потока.

PipedOutputStream: Предоставляет поток для записи данных в связанный поток.

PipedReader: Предоставляет символьный поток для чтения данных из связанного символьного потока.

PipedWriter: Предоставляет символьный поток для записи данных в связанный символьный поток.

PrintStream: Позволяет форматированно выводить данные в поток.

PrintWriter: Позволяет форматированно выводить символьные данные в поток.

PushbackInputStream: Позволяет вернуть считанный байт обратно в поток.

PushbackReader: Позволяет вернуть считанный символ обратно в поток.

RandomAccessFile: Позволяет произвольно перемещаться по файлу и выполнять чтение и запись.

Reader: Абстрактный базовый класс для потоков символьного ввода.

SequenceInputStream: Объединяет несколько потоков ввода в один последовательный поток.

SerializablePermission: Используется для проверки разрешений, связанных с сериализацией.

StreamTokenizer: Разбивает поток на токены для обработки.

StringBufferInputStream: Использует строку как источник для байтового ввода (устаревший класс).

StringReader: Использует строку как источник символьного ввода.

StringWriter: Использует строку для буферизованной записи символов.

Writer: Абстрактный базовый класс для потоков символьного вывода.

Интерфейсы:

Closeable: Интерфейс, который обозначает, что объект может быть закрыт для освобождения ресурсов.

DataInput: Интерфейс для чтения примитивных типов данных из байтового потока.

DataOutput: Интерфейс для записи примитивных типов данных в байтовый поток.

Externalizable: Интерфейс для управления своей сериализацией и десериализацией.


FileFilter: Интерфейс для фильтрации файлов и папок на основе заданных критериев.

FilenameFilter: Интерфейс для фильтрации файлов в каталоге по имени файла.

Flushable: Интерфейс, который обозначает, что объект можно принудительно "сбросить" для записи буферизованных данных.

ObjectInput: Интерфейс для чтения объектов из потока.

ObjectInputValidation: Интерфейс, который позволяет объекту выполнять проверку после чтения из потока.

ObjectOutput: Интерфейс для записи объектов в поток.

Serializable: Маркерный интерфейс, который обозначает, что объект может быть сериализован и десериализован.